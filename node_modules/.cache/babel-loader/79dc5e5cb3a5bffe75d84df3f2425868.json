{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Downloads/OSA-React-master/src/components/PrivateRoute.js\";\nimport React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport AuthService from \"../services/auth.service\";\nexport const PrivateRoute = ({\n  component: Component,\n  roles,\n  ...rest\n}) => // Instanciraj rutu sa svim njenim elementima (...rest) ali uz dodatnu proveru autorizacije\nReact.createElement(Route, Object.assign({}, rest, {\n  render: props => {\n    const role = AuthService.getRole();\n    console.log(role);\n\n    if (!role) {\n      // Korisnik nije ulogovan a pokušava da pristup zaštićenoj stranici - vrati ga na login\n      return React.createElement(Redirect, {\n        to: {\n          pathname: \"/login\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      });\n    }\n\n    if (roles && !roles.includes(role)) {\n      // Ako je korisnik ulogovan ali nema dozvolu pristupa zaštićenoj stranici - vrati ga na glavnu stranicu\n      return React.createElement(Redirect, {\n        to: {\n          pathname: \"/articles\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      });\n    } // Vrati stranicu koja se traži\n\n\n    return React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }));\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}));","map":{"version":3,"sources":["/home/ubuntu/Downloads/OSA-React-master/src/components/PrivateRoute.js"],"names":["React","Redirect","Route","AuthService","PrivateRoute","component","Component","roles","rest","props","role","getRole","console","log","pathname","includes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,KAAxB;AAA+B,KAAGC;AAAlC,CAAD,KAC1B;AAEA,oBAAC,KAAD,oBACMA,IADN;AAEE,EAAA,MAAM,EAAGC,KAAD,IAAW;AACjB,UAAMC,IAAI,GAAGP,WAAW,CAACQ,OAAZ,EAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,QAAI,CAACA,IAAL,EAAW;AACT;AACA,aAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,QAAIP,KAAK,IAAI,CAACA,KAAK,CAACQ,QAAN,CAAeL,IAAf,CAAd,EAAoC;AAClC;AACA,aAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAXgB,CAajB;;;AACA,WAAO,oBAAC,SAAD,oBAAeL,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAHK","sourcesContent":["import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport AuthService from \"../services/auth.service\";\n\nexport const PrivateRoute = ({ component: Component, roles, ...rest }) => (\n  // Instanciraj rutu sa svim njenim elementima (...rest) ali uz dodatnu proveru autorizacije\n\n  <Route\n    {...rest}\n    render={(props) => {\n      const role = AuthService.getRole();\n      console.log(role)\n      if (!role) {\n        // Korisnik nije ulogovan a pokušava da pristup zaštićenoj stranici - vrati ga na login\n        return <Redirect to={{ pathname: \"/login\" }} />;\n      }\n\n      if (roles && !roles.includes(role)) {\n        // Ako je korisnik ulogovan ali nema dozvolu pristupa zaštićenoj stranici - vrati ga na glavnu stranicu\n        return <Redirect to={{ pathname: \"/articles\" }} />;\n      }\n\n      // Vrati stranicu koja se traži\n      return <Component {...props} />;\n    }}\n  />\n);"]},"metadata":{},"sourceType":"module"}