{"ast":null,"code":"import axios from \"axios\";\nimport { TokenService } from \"./TokenService\";\nconst API_URL = \"http://localhost:8096/api/auth/\";\n\nclass AuthService {\n  login(username, password) {\n    return axios.post(API_URL + \"login\", {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        console.log(response.data);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      console.log(response.data);\n      return response.data;\n    });\n  }\n\n  resetPassword(newPassword) {\n    return axios.post(API_URL + \"login\", {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        console.log(response.data);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      console.log(response.data);\n      return response.data;\n    });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  register(firstname, lastname, username, password, adress) {\n    return axios.post(API_URL + \"buyer/signup\", {\n      firstname,\n      lastname,\n      username,\n      password,\n      adress\n    });\n  }\n\n  registerSalesman(firstname, lastname, username, password, adress) {\n    return axios.post(API_URL + \"salesmen/signup\", {\n      firstname,\n      lastname,\n      username,\n      password,\n      adress\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n    ;\n  }\n\n  getRole() {\n    console.log(\"BLAA\");\n    const token = TokenService.getToken();\n    console.log(\"eoooo\" + token);\n    const decoded_token = token ? TokenService.decodeToken(token) : null;\n    console.log(decoded_token);\n\n    if (decoded_token) {\n      return decoded_token.role.authority;\n    } else {\n      return null;\n    }\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/ubuntu/Downloads/OSA-React-master/src/services/auth.service.js"],"names":["axios","TokenService","API_URL","AuthService","login","username","password","post","then","response","data","accessToken","console","log","localStorage","setItem","JSON","stringify","resetPassword","newPassword","logout","removeItem","register","firstname","lastname","adress","registerSalesman","getCurrentUser","parse","getItem","getRole","token","getToken","decoded_token","decodeToken","role","authority"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { TokenService } from \"./TokenService\";\n\nconst API_URL = \"http://localhost:8096/api/auth/\";\n\nclass AuthService {\n  login(username, password) {\n    return axios\n      .post(API_URL + \"login\", {\n        username,\n        password\n      })\n      .then(response => {\n\n        if (response.data.accessToken) {\n          console.log(response.data)\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n\n        }\n        console.log(response.data)\n        return response.data;\n      });\n  }\n\n\n  resetPassword(newPassword) {\n    return axios\n      .post(API_URL + \"login\", {\n        username,\n        password\n      })\n      .then(response => {\n\n        if (response.data.accessToken) {\n          console.log(response.data)\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n\n        }\n        console.log(response.data)\n        return response.data;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  register(firstname, lastname, username,   password, adress) {\n    return axios.post(API_URL + \"buyer/signup\", {\n      firstname,\n      lastname,\n      username,\n      password,\n      adress\n    });\n  }\n\n  registerSalesman(firstname, lastname, username,   password, adress) {\n    return axios.post(API_URL + \"salesmen/signup\", {\n      firstname,\n      lastname,\n      username,\n      password,\n      adress\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));;\n  }\n\n  getRole() {\n      console.log(\"BLAA\")\n    const token = TokenService.getToken();\n    console.log(\"eoooo\" + token)\n    const decoded_token = token ? TokenService.decodeToken(token) : null;\n        console.log(decoded_token)\n\n    if (decoded_token) {\n      \n      return decoded_token.role.authority;\n    } else {\n      return null;\n    }\n  }\n\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}